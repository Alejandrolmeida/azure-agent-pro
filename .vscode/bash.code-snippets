{
  "Azure CLI Function with Error Handling": {
    "prefix": "az-func-robust",
    "body": [
      "# ${1:Description of function purpose and requirements}",
      "# Parameters: ${2:param1, param2, param3}",
      "# Returns: ${3:return value description}",
      "# Dependencies: Azure CLI 2.50+, jq for JSON parsing",
      "# Example: ${4:function_name \"value1\" \"value2\" \"value3\"}",
      "${5:function_name}() {",
      "    local ${6:param1}=\"\\$1\"",
      "    local ${7:param2}=\"\\$2\"",
      "    local ${8:param3}=\"\\$3\"",
      "    ",
      "    # Input validation and parameter checking",
      "    if [[ -z \"\\$${6:param1}\" ]]; then",
      "        log_error \"Parameter ${6:param1} is required\"",
      "        return 1",
      "    fi",
      "    ",
      "    log_info \"${9:Starting operation description}\"",
      "    ",
      "    # Main function logic - Copilot will complete based on context",
      "    $0",
      "    ",
      "    log_success \"${10:Completion message}\"",
      "}"
    ],
    "description": "Robust Azure CLI function template for Copilot"
  },
  "Azure Resource Deployment Function": {
    "prefix": "az-deploy-func",
    "body": [
      "# Deploy ${1:resource type} with validation and retry logic",
      "# Supports: parameter validation, what-if analysis, rollback capability",
      "# Parameters: resource_name, resource_group, location, [additional_params]",
      "deploy_${2:resource_name}() {",
      "    local resource_name=\"\\$1\"",
      "    local resource_group=\"\\$2\"",
      "    local location=\"\\$3\"",
      "    local max_retries=3",
      "    local retry_count=0",
      "    ",
      "    # Validate Azure CLI session",
      "    if ! az account show &>/dev/null; then",
      "        log_error \"Not logged into Azure. Run azure-login.sh first\"",
      "        return 1",
      "    fi",
      "    ",
      "    # Check if resource group exists",
      "    if ! az group show --name \"\\$resource_group\" &>/dev/null; then",
      "        log_error \"Resource group \\$resource_group does not exist\"",
      "        return 1",
      "    fi",
      "    ",
      "    # Validate resource name availability",
      "    log_info \"Validating ${1:resource type} name availability: \\$resource_name\"",
      "    ",
      "    # Deployment with retry logic",
      "    while [[ \\$retry_count -lt \\$max_retries ]]; do",
      "        log_info \"Deployment attempt \\$((retry_count + 1)) of \\$max_retries\"",
      "        ",
      "        if ${3:az_command_here}; then",
      "            log_success \"${1:resource type} deployed successfully: \\$resource_name\"",
      "            return 0",
      "        else",
      "            ((retry_count++))",
      "            if [[ \\$retry_count -lt \\$max_retries ]]; then",
      "                log_warning \"Deployment failed, retrying in 30 seconds...\"",
      "                sleep 30",
      "            fi",
      "        fi",
      "    done",
      "    ",
      "    log_error \"Failed to deploy ${1:resource type} after \\$max_retries attempts\"",
      "    return 1",
      "}"
    ],
    "description": "Azure resource deployment function with retry logic"
  },
  "Resource Validation Function": {
    "prefix": "az-validate-func",
    "body": [
      "# Validate ${1:resource type} configuration and compliance",
      "# Checks: naming convention, security settings, cost optimization",
      "# Parameters: resource_id or resource_name, [validation_level]",
      "validate_${2:resource_name}() {",
      "    local resource_id=\"\\$1\"",
      "    local validation_level=\"\\${2:-standard}\"  # basic, standard, strict",
      "    local validation_errors=0",
      "    ",
      "    log_info \"Validating ${1:resource type}: \\$resource_id\"",
      "    log_info \"Validation level: \\$validation_level\"",
      "    ",
      "    # Check if resource exists",
      "    if ! ${3:az_show_command} --ids \"\\$resource_id\" &>/dev/null; then",
      "        log_error \"Resource not found: \\$resource_id\"",
      "        return 1",
      "    fi",
      "    ",
      "    # Get resource details",
      "    local resource_json",
      "    resource_json=\\$(${3:az_show_command} --ids \"\\$resource_id\" --output json)",
      "    ",
      "    # Naming convention validation",
      "    local resource_name",
      "    resource_name=\\$(echo \"\\$resource_json\" | jq -r '.name')",
      "    if ! validate_resource_name \"\\$resource_name\" \"${4:resource_type}\"; then",
      "        log_warning \"Resource name does not follow naming convention: \\$resource_name\"",
      "        ((validation_errors++))",
      "    fi",
      "    ",
      "    # Security validation",
      "    case \"\\$validation_level\" in",
      "        \"strict\")",
      "            # Strict security checks",
      "            $0",
      "            ;;",
      "        \"standard\")",
      "            # Standard security checks",
      "            ;;",
      "        \"basic\")",
      "            # Basic validation only",
      "            ;;",
      "    esac",
      "    ",
      "    if [[ \\$validation_errors -eq 0 ]]; then",
      "        log_success \"${1:resource type} validation passed: \\$resource_name\"",
      "        return 0",
      "    else",
      "        log_warning \"${1:resource type} validation completed with \\$validation_errors warnings\"",
      "        return 0",
      "    fi",
      "}"
    ],
    "description": "Resource validation function with compliance checks"
  },
  "Cost Analysis Function": {
    "prefix": "az-cost-func",
    "body": [
      "# Analyze costs for ${1:resource type or scope}",
      "# Provides: current spend, forecast, recommendations, budget alerts",
      "# Parameters: scope (subscription/resource_group/resource), time_period",
      "analyze_${2:scope}_costs() {",
      "    local scope=\"\\$1\"",
      "    local time_period=\"\\${2:-30}\"  # days",
      "    local currency=\"USD\"",
      "    ",
      "    log_info \"Analyzing costs for scope: \\$scope\"",
      "    log_info \"Time period: last \\$time_period days\"",
      "    ",
      "    # Validate scope format",
      "    case \"\\$scope\" in",
      "        \"/subscriptions/\"*)",
      "            local scope_type=\"subscription\"",
      "            ;;",
      "        \"/subscriptions/\"*\"/resourceGroups/\"*)",
      "            local scope_type=\"resourceGroup\"",
      "            ;;",
      "        *)",
      "            log_error \"Invalid scope format: \\$scope\"",
      "            return 1",
      "            ;;",
      "    esac",
      "    ",
      "    # Get cost data using Azure Cost Management API",
      "    local start_date end_date",
      "    start_date=\\$(date -d \"\\$time_period days ago\" +%Y-%m-%d)",
      "    end_date=\\$(date +%Y-%m-%d)",
      "    ",
      "    log_info \"Fetching cost data from \\$start_date to \\$end_date\"",
      "    ",
      "    # Current period costs",
      "    local current_costs",
      "    current_costs=\\$(az costmanagement query \\\\",
      "        --type \"ActualCost\" \\\\",
      "        --dataset-aggregation '{\"totalCost\":{\"name\":\"PreTaxCost\",\"function\":\"Sum\"}}' \\\\",
      "        --dataset-grouping name=\"ResourceGroup\" type=\"Dimension\" \\\\",
      "        --timeframe \"Custom\" \\\\",
      "        --time-period from=\"\\$start_date\" to=\"\\$end_date\" \\\\",
      "        --scope \"\\$scope\" \\\\",
      "        --query 'properties.rows' \\\\",
      "        --output json)",
      "    ",
      "    # Cost analysis and recommendations",
      "    $0",
      "    ",
      "    log_success \"Cost analysis completed for \\$scope_type\"",
      "}"
    ],
    "description": "Cost analysis function with recommendations"
  },
  "Backup and Recovery Function": {
    "prefix": "az-backup-func",
    "body": [
      "# Backup ${1:resource type} with retention policy and verification",
      "# Supports: incremental backup, point-in-time recovery, cross-region replication",
      "# Parameters: resource_id, backup_vault, retention_days",
      "backup_${2:resource_name}() {",
      "    local resource_id=\"\\$1\"",
      "    local backup_vault=\"\\$2\"",
      "    local retention_days=\"\\${3:-30}\"",
      "    ",
      "    log_info \"Starting backup for ${1:resource type}: \\$resource_id\"",
      "    log_info \"Backup vault: \\$backup_vault\"",
      "    log_info \"Retention period: \\$retention_days days\"",
      "    ",
      "    # Validate backup vault exists",
      "    if ! az backup vault show --name \"\\$backup_vault\" --resource-group \"\\$RG\" &>/dev/null; then",
      "        log_error \"Backup vault not found: \\$backup_vault\"",
      "        return 1",
      "    fi",
      "    ",
      "    # Check if resource is already protected",
      "    local protection_status",
      "    protection_status=\\$(${3:check_protection_command})",
      "    ",
      "    if [[ \"\\$protection_status\" == \"Protected\" ]]; then",
      "        log_info \"Resource is already protected, triggering on-demand backup\"",
      "        ${4:trigger_backup_command}",
      "    else",
      "        log_info \"Enabling backup protection for resource\"",
      "        ${5:enable_protection_command}",
      "        ",
      "        # Wait for protection to be enabled",
      "        local max_wait=300  # 5 minutes",
      "        local wait_time=0",
      "        ",
      "        while [[ \\$wait_time -lt \\$max_wait ]]; do",
      "            if ${6:check_protection_enabled}; then",
      "                log_success \"Backup protection enabled\"",
      "                break",
      "            fi",
      "            sleep 30",
      "            ((wait_time += 30))",
      "        done",
      "    fi",
      "    ",
      "    # Verify backup completion",
      "    $0",
      "    ",
      "    log_success \"Backup completed for ${1:resource type}\"",
      "}"
    ],
    "description": "Backup function with protection and verification"
  },
  "Monitoring Setup Function": {
    "prefix": "az-monitor-func",
    "body": [
      "# Setup monitoring and alerting for ${1:resource type}",
      "# Configures: metrics, logs, alerts, dashboards, notification channels",
      "# Parameters: resource_id, alert_email, severity_level",
      "setup_${2:resource_name}_monitoring() {",
      "    local resource_id=\"\\$1\"",
      "    local alert_email=\"\\$2\"",
      "    local severity_level=\"\\${3:-2}\"  # 0=Critical, 1=Error, 2=Warning, 3=Info",
      "    ",
      "    log_info \"Setting up monitoring for ${1:resource type}: \\$resource_id\"",
      "    log_info \"Alert email: \\$alert_email\"",
      "    log_info \"Severity level: \\$severity_level\"",
      "    ",
      "    # Extract resource details",
      "    local resource_name resource_group subscription_id",
      "    resource_name=\\$(echo \"\\$resource_id\" | cut -d'/' -f9)",
      "    resource_group=\\$(echo \"\\$resource_id\" | cut -d'/' -f5)",
      "    subscription_id=\\$(echo \"\\$resource_id\" | cut -d'/' -f3)",
      "    ",
      "    # Create Action Group for notifications",
      "    local action_group_name=\"\\${resource_name}-alerts-ag\"",
      "    log_info \"Creating action group: \\$action_group_name\"",
      "    ",
      "    az monitor action-group create \\\\",
      "        --name \"\\$action_group_name\" \\\\",
      "        --resource-group \"\\$resource_group\" \\\\",
      "        --action email \"\\$alert_email\" \"\\$alert_email\" \\\\",
      "        --short-name \"\\${resource_name:0:12}\"",
      "    ",
      "    # Setup Log Analytics workspace if needed",
      "    local workspace_name=\"\\${resource_name}-logs-workspace\"",
      "    if ! az monitor log-analytics workspace show \\\\",
      "        --workspace-name \"\\$workspace_name\" \\\\",
      "        --resource-group \"\\$resource_group\" &>/dev/null; then",
      "        ",
      "        log_info \"Creating Log Analytics workspace: \\$workspace_name\"",
      "        az monitor log-analytics workspace create \\\\",
      "            --workspace-name \"\\$workspace_name\" \\\\",
      "            --resource-group \"\\$resource_group\" \\\\",
      "            --location \"\\$LOCATION\"",
      "    fi",
      "    ",
      "    # Configure diagnostic settings",
      "    log_info \"Configuring diagnostic settings\"",
      "    ${3:diagnostic_settings_command}",
      "    ",
      "    # Create metric alerts",
      "    log_info \"Creating metric alerts\"",
      "    ${4:create_alerts_commands}",
      "    ",
      "    $0",
      "    ",
      "    log_success \"Monitoring setup completed for \\$resource_name\"",
      "}"
    ],
    "description": "Comprehensive monitoring setup function"
  }
}